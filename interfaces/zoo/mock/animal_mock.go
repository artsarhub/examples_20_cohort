// Code generated by MockGen. DO NOT EDIT.
// Source: yp-examples/interfaces/zoo (interfaces: Animal)
//
// Generated by this command:
//
//	mockgen -package=mock -destination=./mock/animal_mock.go yp-examples/interfaces/zoo Animal
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAnimal is a mock of Animal interface.
type MockAnimal struct {
	ctrl     *gomock.Controller
	recorder *MockAnimalMockRecorder
}

// MockAnimalMockRecorder is the mock recorder for MockAnimal.
type MockAnimalMockRecorder struct {
	mock *MockAnimal
}

// NewMockAnimal creates a new mock instance.
func NewMockAnimal(ctrl *gomock.Controller) *MockAnimal {
	mock := &MockAnimal{ctrl: ctrl}
	mock.recorder = &MockAnimalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnimal) EXPECT() *MockAnimalMockRecorder {
	return m.recorder
}

// Feed mocks base method.
func (m *MockAnimal) Feed() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Feed")
}

// Feed indicates an expected call of Feed.
func (mr *MockAnimalMockRecorder) Feed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Feed", reflect.TypeOf((*MockAnimal)(nil).Feed))
}

// GetFullness mocks base method.
func (m *MockAnimal) GetFullness() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullness")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetFullness indicates an expected call of GetFullness.
func (mr *MockAnimalMockRecorder) GetFullness() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullness", reflect.TypeOf((*MockAnimal)(nil).GetFullness))
}

// SayHello mocks base method.
func (m *MockAnimal) SayHello() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SayHello")
}

// SayHello indicates an expected call of SayHello.
func (mr *MockAnimalMockRecorder) SayHello() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockAnimal)(nil).SayHello))
}
